#define _CRT_SECURE_NO_WARNINGS
#include <iostream> 
#include <cstdio> 
#include <fstream> 
#include <algorithm> 
#include <cmath> 
#include <deque> 
#include <vector> 
#include <queue> 
#include <string> 
#include <cstring> 
#include <map> 
#include <stack> 
#include <set> 
using namespace std;
// 定义常量
const int INF = 0x3f3f3f3f;////16
#define sqr(x) ((x)*(x))
// 定义变量
string file_name;
int type; // type == 1 满秩矩阵格式, type == 2 二维坐标式
int s;
int N;// 城市结点数量
int init_point;
double **dp; // 动态规划状态数组dp[i][j]，i表示集合V’，j表示当前到达的城市结点
double dis[30][30]; // 两个城市结点之间的距离
double ans;
//string fp;
/////////////////////////////////////////////////////////////////// 定义类
class Vertex{
	double x = 0.0;
	double y = 0.0; // 城市结点的坐标
	//int id; // 城市结点的id
	//double zb[2];
public:
	Vertex()=default ;
    void input(int c){
		//return fscanf_s(fp, "%d %lf %lf", &id, &x, &y);
		
		int i = 0;
		ifstream in("data1.txt");
		if (!in)
		{
			cerr << "无法打开data1文件！\n";
		}
		in >> x;
		for (int j = 0; j < c; j++)
		{
			in >> x >> x;
		}
		in >> x;
		in >> y;
	}
	double EUC_2D(const Vertex &a, const Vertex &b);
	void show() const { cout << x << "\t" << y<<endl; }
	double showx() const{ return x; }
	double showy() const { return y; }
};
double Vertex::EUC_2D(const Vertex &a, const Vertex &b){
	return sqrt(sqr(a.showx() - b.showx()) + sqr(a.showy() - b.showy()));
}



//////////////////////////////////////////////////////////io（）函数
void io()
{ // 数据读入 直接打开data.txt文件

	cout << "请输入type:\n";
	cin >> type;
	  if (type == 1)
	   {
		ifstream in("data.txt");
		if (!in)
		{
			cerr << "无法打开输入文件" << endl;

		}
		int afb;
		vector<int> shuzi;
		while (in >> afb)
		{
			shuzi.push_back(afb);
		}
		in.close();

		N = shuzi[0];
		int k = 1;
		//dis = new double*[N + 5];
		if (type == 1){
			for (int i = 0; i < N; i++){
				//dis[i] = new double[N];
				for (int j = 0; j < N; j++)
				{
					dis[i][j] = shuzi[k];
					k++;
				}
			}
		}
	}
	else
	{
		ifstream in("data1.txt");
		if (!in)
		{
			cerr << "无法打开data1文件！\n";
		}
		int jc;
		in >> N;
		//cout << "请输入N:\n";
		Vertex nod;
		vector<Vertex> node(N);
		/*for (auto k = 0; k < N + 1; k++)
			node.push_back(node[k]);*/
		
		for (int i = 0; i < N; i++)
		{
			node[i].input(i);
			node[i].show();
		}
		
		//in.close();
		
	for (int i = 0; i < N; i++)
	{
		   //dis[i] = new double[N];
		for (int j = 0; j < N; j++)
		{
			dis[i][j] = nod.EUC_2D(node[i], node[j]);
		}// 计算城市之间的距离
	}
	}
	//fclose(fp);
	
	return;
}


/////////////////////////////////////////////////////////////init（）函数
void init()
{ // 数据初始化
	dp = new double*[(1 << N) + 5];
	for (int i = 0; i < (1 << N); i++){
		dp[i] = new double[N + 5];
		for (int j = 0; j < N; j++)
			dp[i][j] = INF;
	} // 初始化，除了dp[1][0]，其余值都为INF
	ans = INF;
	return;
}
double slove()
{
	int M = (1 << N);
	// M就是第四部分所说的V’状态总数，1<<N表示2^N，总共有2^N种状态
	dp[1][0] = 0;
	// 假设固定出发点为0，从0出发回到0的花费为0。TSP只要求是一个环路，所以出发点可以任选
	for (int i = 1; i < M; i++){
		// 枚举V’的所有状态
		for (int j = 1; j < N; j++){
			// 选择下一个加入集合的城市
			if (i & (1 << j)) continue;
			// 城市已经存在于V’之中
			if (!(i & 1)) continue;
			// 出发城市固定为0号城市
			for (int k = 0; k < N; k++){
				// 在V’这个城市集合中尝试每一个结点，并求出最优解
				if (i & (1 << k)){
					// 确保k已经在集合之中并且是上一步转移过来的结点
					dp[(1 << j) | i][j] = min(dp[(1 << j) | i][j], dp[i][k] + dis[k][j]); // 转移方程
				} // 将j点加入到i集合中
			}
		}
	}
	for (int i = 0; i < N; i++)
		ans = min(dp[M - 1][i] + dis[i][0], ans);
	// 因为固定了出发点，所以要加上到城市0的距离。另外要从所有的完成整个环路的集合V’中选择，完成最后的转移
	return ans;
}

/////////////////////////////////////////////////////////////主函数
int main(){
	char y;
	cout << "请输入y开始：\n";
	while (cin >> y&&y=='y')
	{
		io();
		init();
		//string tmp = file_name + ".sol";
		//FILE *fp = fopen(tmp.c_str(), "w");
		//fprintf(fp, "%.2lf\n", slove());
		double ad = slove();
		cout << ad << endl;
		delete[] dp;
		//delete[] node;
		//delete[] dis;
		//fclose(fp);
		cout << "是否继续？\n";
	}
	  return 0;
}